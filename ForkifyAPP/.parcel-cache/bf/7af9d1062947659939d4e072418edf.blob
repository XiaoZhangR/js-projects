var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _modelJs = require("./model.js");
var _recipeViewJs = require("./views/recipeView.js");
var _recipeViewJsDefault = parcelHelpers.interopDefault(_recipeViewJs);
var _searchViewJs = require("./views/searchView.js");
var _searchViewJsDefault = parcelHelpers.interopDefault(_searchViewJs);
var _resultsViewJs = require("./views/resultsView.js");
var _resultsViewJsDefault = parcelHelpers.interopDefault(_resultsViewJs);
var _paginationViewJs = require("./views/paginationView.js");
var _paginationViewJsDefault = parcelHelpers.interopDefault(_paginationViewJs);
var _stable = require("core-js/stable");
var _runtime = require("regenerator-runtime/runtime");
if (module.hot) module.hot.accept();
const controlRecipes = async function() {
    try {
        const id = window.location.hash.slice(1);
        // console.log(id);
        if (!id) return;
        _recipeViewJsDefault.default.renderSpinner();
        // 1. Loading recipe
        await _modelJs.loadRecipe(id); //this is a async function, it manipulated data in state
        // 2. Rendering recipe 
        _recipeViewJsDefault.default.render(_modelJs.state.recipe);
    } catch (err) {
        _recipeViewJsDefault.default.renderError();
    }
};
// this function excutes right in the begining when page loads
// we need to listen to some event(form submit/click button), then only on that event we want to call this function
const controlSearchResults = async function() {
    try {
        _resultsViewJsDefault.default.renderSpinner();
        // console.log(resultsView);
        // 1. Get search query
        const query = _searchViewJsDefault.default.getQuery();
        if (!query) return;
        // console.log(query);
        // 2. Load search results
        await _modelJs.loadSearchResults(query);
        // 3. Rendering search results
        _resultsViewJsDefault.default.render(_modelJs.getSearchResultsPage());
        // 4. Render initial pagination buttons
        _paginationViewJsDefault.default.render(_modelJs.state.search);
    } catch (err) {
        console.log(err);
    }
};
const controlPagination = function(goToPage) {
    // 1. Render New results
    _resultsViewJsDefault.default.render(_modelJs.getSearchResultsPage(goToPage));
    // 2. Render New pagination buttons
    _paginationViewJsDefault.default.render(_modelJs.state.search);
};
const controlServings = function() {
    // Update the recipe servings (in state)
    _modelJs.updateServings(8);
    // Update the recipe view
    _recipeViewJsDefault.default.render(_modelJs.state.recipe);
// recipeView.update(model.state.recipe);
};
const init = function() {
    _recipeViewJsDefault.default.addHandlerRender(controlRecipes);
    _recipeViewJsDefault.default.addHandlerUpdateServings(controlServings);
    _searchViewJsDefault.default.addHandlerSearch(controlSearchResults);
    _paginationViewJsDefault.default.addHandlerClick(controlPagination);
};
init();
